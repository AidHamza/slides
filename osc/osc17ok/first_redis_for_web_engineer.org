#+REVEAL_ROOT: ../../reveal.js
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+OPTIONS: reveal_slide_number:nil reveal_control:nil reveal_progress:nil toc:0 reveal_mathjax:t num:nil LaTeX:t timestamp:nil
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../../extra.css
#+TITLE: Webエンジニアのためのはじめてのredis
#+AUTHOR: @nasa9084

* $ whoami
  :PROPERTIES:
  :reveal_background: img/ikura.jpg
  :END:
  #+REVEAL_HTML: <div class="flex-container">
  file:img/pika.jpg

  - *Masahiro Kitamura*
  - *@nasa9084*
  - *VirtualTech Japan Inc.*
  #+REVEAL_HTML: </div>
*KEYWORDS: emacs python golang(new!) whiske?y*

* redis
:PROPERTIES:
:reveal_background: img/redis_bg.png
:END:

** What is "redis"?
   #+REVEAL_HTML: <div style="float: left;">
   file:img/redis.png
   #+REVEAL_HTML: </div>

   - remote dictionary server
   - Key-Value Store (KVS)
     + *Varied Data Structure*
   - in-memory
     + *having persistence*
   - easy and fast
     + compatible w/Python, Ruby, ...
   #+ATTR_REVEAL: :frag (appear)
   →web engineers should learn redis!

#+BEGIN_NOTES
- BSD license
- implemented with C
- latest stable version is 3.2.9
#+END_NOTES
** Key-value Store (KVS)
   - dict(Python)
   - hash(Perl, Ruby)
   - map(C++, Java, Go)
   - namespaces

file:img/comp_rdb_kvs.png

** Comparison with RDBMSs

| Function                | RDBMS | Redis |
|-------------------------+-------+-------|
| using simply            | △    | ◎    |
| high speed processing   | △    | ◎    |
| horizontal distribution | ×    | ◎    |
| high availability       | △    | ◎    |
| persistency             | ◎    | ○    |
| complex query           | ◎    | ×    |
| transaction             | ◎    | △    |
| consistency             | ◎    | △    |

#+BEGIN_NOTES
- SQLでもできなくはないがより簡単
- in-memoryで構造がシンプルなため
- クラスタリングをネイティブサポートしている
- マスタ・スレーブ構成をサポート
- 複雑な絞り込みなどはできない
- なくはないがロールバックしない
- トランザクションがないので
#+END_NOTES

** Comparison with memcached

|                   | memcached   | redis            |
|-------------------+-------------+------------------|
| good at           | Cache       | Cache            |
| data structure    | only string | varied structure |
| persistency       | ×          | ○               |
| Disk I/O          | NOT DO      | can be disable   |
| speed             | high        | high             |
| multi thread      | ○          | ×               |
| memory efficiency | △          | ○               |

#+BEGIN_NOTES
- スレッド単位ではmemcachedとredisは同程度
#+END_NOTES

* Redis Data Structure
#+BEGIN_NOTES
memcachedと比較して型が多いのがredisの特徴
#+END_NOTES

** String
   #+REVEAL_HTML: <div style="float: left;">
   file:img/string.png
   #+REVEAL_HTML: </div>

   - String
     + replace
     + get length
   - number
     + ~INCR~ / ~DECR~
   - max: 512MB
   - binary safe
     + can insert pictures, etc

#+BEGIN_NOTES
最も基本的な型
#+END_NOTES

*** String
    #+REVEAL_HTML: <div class="flex-container"><div>
    *redis*
    #+BEGIN_SRC redis
    > SET hoge fugafuga
    OK
    > GET hoge
    "fugafuga"

    > SET point 10
    OK
    > GET point
    "10"
    > INCR point
    (integer) 11
    > GET point
    "11"
    #+END_SRC
    #+REVEAL_HTML: </div><div>
    *python*
    #+BEGIN_SRC python
    from redis import Redis

    redis = Redis()
    redis.set('hoge', 'fugafuga')
    print(redis.get('hoge'))
    #=> b'fugafuga'

    redis.set('point', 10)
    print(redis.get('point'))
    #=> b'10'
    redis.incr('point')
    print(redis.get('point'))
    #=> b'11'
    #+END_SRC
    #+REVEAL_HTML: </div></div>

** List
   file:img/list.png

   - List of Strings
   - Implemented with Linked List
     + insert or access to head or tail: *$O(1)$*
     + access to mid: $O(N)$
   - max size: 2^{32}-1 elements

#+BEGIN_NOTES
2^{32}-1 = 約42億
#+END_NOTES

*** List
    #+REVEAL_HTML: <div class="flex-container"><div>
    *redis*
    #+BEGIN_SRC redis
    > LPUSH 1 2 3
    (integer) 3
    > LRANGE piyo 0 -1
    "3"
    "2"
    "1"
    > LPOP piyo
    "3"
    > LRANGE piyo 0 -1
    "2"
    "1"
    #+END_SRC
    #+REVEAL_HTML: </div><div>
    *python*
    #+BEGIN_SRC python
    from redis import Redis

    redis = Redis()
    redis.lpush('piyo', 1, 2, 3)
    print(redis.lrange('piyo', 0, -1))
    #=> [b'3', b'2', b'1']
    print(redis.lpop('piyo'))
    #=> b'3'
    print(redis.lrange('piyo', 0, -1))
    #=> [b'2', b'1']
    #+END_SRC
    #+REVEAL_HTML: </div></div>

** Set
   file:img/set.png

   - Set of Strings
     + un-ordered
     + no duplication
   - add, delete, access avarage:  *$O(1)$*
   - max size: 2^{32}-1 elements

#+BEGIN_NOTES
- Hash表を用いて実装されているため
- リサイズは同期操作
  + 巨大なセットを扱うときは注意
#+END_NOTES

*** Set
    #+REVEAL_HTML: <div class="flex-container"><div>
    *redis*
    #+BEGIN_SRC redis
    > SADD foo 1 3 5
    (integer) 3
    > SMEMBERS foo
    "1"
    "3"
    "5"
    > SADD foo 1
    (integer) 0
    > SMEMBERS foo
    "1"
    "3"
    "5"
    #+END_SRC
    #+REVEAL_HTML: </div><div>
    *python*
    #+BEGIN_SRC python
    from redis import Redis

    redis = Redis()
    redis.sadd('foo', 1, 3, 5)
    print(redis.smembers('foo'))
    #=>{b'3', b'5', b'1'}
    redis.sadd('foo', 1)
    print(redis.smembers('foo'))
    #=>{b'3', b'5', b'1'}
    #+END_SRC
    #+REVEAL_HTML: </div>

#+BEGIN_NOTES
和集合・積集合・差集合演算もできる
#+END_NOTES

** Sorted Set (ZSet)
   file:img/zset.png

   - Set of Strings
     + no duplication
   - each members are ordered with its Score
   - take Score: *$O(1)$*
   - add: $O(\log{N})$

#+BEGIN_NOTES
Redisの中でも特徴的な型
- 中間要素へのアクセスが高速
#+END_NOTES

*** Sorted Set (ZSet)
   #+REVEAL_HTML: <div class="flex-container small"><div>
   *redis*
   #+BEGIN_SRC redis
   > ZADD bar 20 ham
   (integer) 1
   > ZADD bar 10 egg
   (integer) 1
   > ZADD bar 30 spam
   (integer) 1
   > ZRANGE bar 0 -1 WITHSCORES
   1) "egg"
   2) "10"
   3) "ham"
   4) "20"
   5) "spam"
   6) "30"
   #+END_SRC
   #+REVEAL_HTML: </div><div>
   *python*
   #+BEGIN_SRC python
   from redis import Redis

   redis = Redis()
   redis.zadd('bar', 'ham', 20)
   redis.zadd('bar', 'egg', 10)
   redis.zadd('bar', 'spam', 30)
   print(
       redis.zrange('bar', 0, -1, withscores=True)
   )
   #=>[(b'egg', 10.0), (b'ham', 20.0), (b'spam', 30.0)]
   #+END_SRC
   #+REVEAL_HTML: </div>

** Hash
   file:img/hash.png

   - String to String map
     + Java: ~HashMap<String, String>~
     + Go: ~map[string]string
   - add, delete, access: *$O(1)$*
   - max size: 2^{32}-1 pairs

#+BEGIN_NOTES
少ないフィールドのHashはメモリ効率が良い
#+END_NOTES

*** Hash
    #+REVEAL_HTML: <div class="flex-container small"><div>
    *redis*
    #+BEGIN_SRC redis
    > HSET bar 0:00 5
    (integer) 1
    > HGETALL bar
    1) "0:00"
    2) "5"
    > HMSET bar 1:00 5 2:00 6
    (integer) 2
    > HKEYS bar
    1) "0:00"
    2) "1:00"
    3) "2:00"
    > HGET bar 0:00
    "5"
    #+END_SRC
    #+REVEAL_HTML: </div><div>
    *python*
    #+BEGIN_SRC python
    from redis import Redis

    redis = Redis()
    redis.hset('bar', '0:00', '5')
    print(redis.hgetall('bar'))
    #=>{b'0:00': b'5'}
    add_dict = {
        '1:00': '5',
        '2:00': '6'
    }
    redis.hmset('bar', add_dict)
    print(redis.hkeys('bar'))
    #=>[b'0:00', b'1:00', b'2:00]
    print(redis.hget('bar', '0:00'))
    #=>b'5'
    #+END_SRC
    #+REVEAL_HTML: </div></div>

* Usecases
** data having expiration
can set expiration to key
#+BEGIN_SRC redis
EXPIRE key seconds
#+END_SRC
`key` is expired after `seconds` seconds

#+BEGIN_SRC redis
EXPIREAT key timestamp
#+END_SRC
`key` is expired on `timestamp`

*** for example,
- Session ID
- One Time Token

*** Sample Code
#+BEGIN_SRC python
from redis import Redis
from uuid import uuid4

class User:
    def generate_apikey(self):
        redis = Redis(host='localhost', port=6389)
        if redis.exists(self.token):
            return self.token
        new_apikey = 'hbt-' + str(uuid4())
        ttl = 10 * 60 * 60  # 10 minutes
        redis.setex(new_apikey, self.name, ttl)
        self.apikey = new_apikey
        return self.apikey
#+END_SRC

#+REVEAL_HTML: <div>
https://github.com/web-apps-tech/hubotmaker.git

https://hubot.web-apps.tech/
#+REVEAL_HTML: </div>

** Real Time Ranking
*sorted set*


#+BEGIN_SRC redis
zadd key score member
#+END_SRC
keyにscore点を持ったmemberを追加する
add a `member` that has `score` to `key`

#+BEGIN_SRC redis
zincrby key increment member
#+END_SRC
increment score of `member` of `key`

#+BEGIN_SRC redis
zrange key start stop
#+END_SRC
get `key`s members from `start` to `stop`

*** Sample Code
#+REVEAL_HTML: <div class="small">
#+BEGIN_SRC python
from redis import Redis

redis = Redis()

while True:
    print('input member:score> ', end='')
    ipt = input()
    if ipt == 'show':  # command 'show'
        ranking = redis.zrange('ranking', 0, 5, withscores=True)[::-1]
        for i, m in enumerate(ranking):
            values = {
                'rank': i+1,
                'member': m[0].decode(),
                'point': m[1]
            }
            print('{rank}: {member} ({point}pt)'.format(**values))
        continue
    member, score = args.split(':')
    redis.zadd('ranking', member, int(score))
print('good bye')
#+END_SRC
#+REVEAL_HTML:</div>

https://github.com/nasa9084/samples.git

* try to use redis
** try redis
   file:img/try_redis.png
   http://try.redis.io/

#+BEGIN_NOTES
チュートリアルも搭載
#+END_NOTES

** official docker container
:PROPERTIES:
:reveal_background: img/docker.png
:END:

#+BEGIN_SRC shell
$ docker run redis
#+END_SRC

** in conclusion
- in-memory KVS
- having persistency
- very varied data structure
  + String, List, Set, Hash, SortedSet
- you can try to use redis with `try redis`
