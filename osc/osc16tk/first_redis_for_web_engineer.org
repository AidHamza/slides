#+REVEAL_ROOT: ../../reveal.js
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+OPTIONS: reveal_slide_number:nil reveal_control:nil reveal_progress:nil toc:0 reveal_mathjax:t num:nil LaTeX:t timestamp:nil
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../../extra.css
#+TITLE: Webエンジニアのためのはじめてのredis
#+AUTHOR: @nasa9084

  #+REVEAL_HTML: <div style="float: left;">
* $ whoami
  :PROPERTIES:
  :reveal_background: img/ikura.jpg
  :END:
  file:img/pika.jpg

  - *北村壮大 (Masahiro Kitamura)*
  - *@nasa9084*
  - *北海道大学工学部*
  - *情報エレクトロニクス学科*
  - *コンピュータサイエンスコース*
  - *情報認識学研究室*
  #+REVEAL_HTML: </div>

  - 北村壮大 (Masahiro Kitamura)
  - @nasa9084
  - 北海道大学工学部
  - 情報エレクトロニクス学科
  - コンピュータサイエンスコース
  - 情報認識学研究室

#+REVEAL: split
  file:img/digiporo_logo.png

   初心者向けIT技術勉強会
   - HTTPのキホン
   - 正規表現入門
   - Webサーバーを構築してみよう
   - はじめてのSQL
   - などなど...

* redis
:PROPERTIES:
:reveal_background: img/redis_bg.png
:END:

** redisとは?
   #+REVEAL_HTML: <div style="float: left;">
   file:img/redis.png
   #+REVEAL_HTML: </div>

   - remote dictionary server
   - Key-Value Store (KVS)
     + 豊富なデータ型
   - in-memory
     + 永続化もできる
   - 簡単・速い
     + Python, Ruby等と相性◎

#+BEGIN_NOTES
- BSD license
- 実装はC
- 最新のStableは3.2.5
#+END_NOTES

** Key-value Store (KVS)
   - dict(Python)
   - hash(Perl, Ruby)
   - map(C++, Java, Go)
   - 名前空間

file:img/comp_rdb_kvs.png

** RDBMSとの比較

| 機能             | RDBMS | Redis |
|------------------+-------+-------|
| シンプルな用途   | △    | ◎    |
| 高速処理         | △    | ◎    |
| 水平分散         | ×    | ◎    |
| 高可用設計       | △    | ◎    |
| 複雑なクエリ     | ◎    | ×    |
| トランザクション | ◎    | △    |
| 一貫性           | ◎    | △    |

#+BEGIN_NOTES
- SQLでもできなくはないがより簡単
- in-memoryで構造がシンプルなため
- クラスタリングをネイティブサポートしている
- マスタ・スレーブ構成をサポート
- 複雑な絞り込みなどはできない
- なくはないがロールバックしない
- トランザクションがないので
#+END_NOTES

* Redisのデータ型
#+BEGIN_NOTES
memcachedと比較して型が多いのがredisの特徴
#+END_NOTES

** String
   #+REVEAL_HTML: <div style="float: left;">
   file:img/string.png
   #+REVEAL_HTML: </div>

   - 文字列
     + 文字列の一部置き換え
     + 長さの取得
   - 数値
     + ~INCR~ / ~DECR~ できる
   - 最大512MB
   - バイナリセーフ
     + 画像などもOK

#+BEGIN_NOTES
最も基本的な型
#+END_NOTES

*** String
    #+REVEAL_HTML: <div class="flex-container"><div>
    *redis*
    #+BEGIN_SRC redis
    > SET hoge fugafuga
    OK
    > GET hoge
    "fugafuga"

    > SET point 10
    OK
    > GET point
    "10"
    > INCR point
    (integer) 11
    > GET point
    "11"
    #+END_SRC
    #+REVEAL_HTML: </div><div>
    *python*
    #+BEGIN_SRC python
    from redis import Redis

    redis = Redis()
    redis.set('hoge', 'fugafuga')
    print(redis.get('hoge'))
    #=> b'fugafuga'

    redis.set('point', 10)
    print(redis.get('point'))
    #=> b'10'
    redis.incr('point')
    print(redis.get('point'))
    #=> b'11'
    #+END_SRC
    #+REVEAL_HTML: </div></div>

** List
   file:img/list.png

   - Stringのリスト
   - 実装はLinked List
     + 先頭・末尾への挿入・アクセスは *$O(1)$*
     + 中間要素へのアクセスは $O(N)$
   - 最大2^{32}-1要素

#+BEGIN_NOTES
2^{32}-1 = 約42億
#+END_NOTES

*** List
    #+REVEAL_HTML: <div class="flex-container"><div>
    *redis*
    #+BEGIN_SRC redis
    > LPUSH 1 2 3
    (integer) 3
    > LRANGE piyo 0 -1
    "3"
    "2"
    "1"
    > LPOP piyo
    "3"
    > LRANGE piyo 0 -1
    "2"
    "1"
    #+END_SRC
    #+REVEAL_HTML: </div><div>
    *python*
    #+BEGIN_SRC python
    from redis import Redis

    redis = Redis()
    redis.lpush('piyo', 1, 2, 3)
    print(redis.lrange('piyo', 0, -1))
    #=> [b'3', b'2', b'1']
    print(redis.lpop('piyo'))
    #=> b'3'
    print(redis.lrange('piyo', 0, -1))
    #=> [b'2', b'1']
    #+END_SRC
    #+REVEAL_HTML: </div></div>

** Set
   file:img/set.png

   - Stringの集合
     + 順序なし
     + 重複なし
   - 追加・削除・アクセスが *$O(1)$*
   - 最大2^{32}-1要素

*** Set
    #+REVEAL_HTML: <div class="flex-container"><div>
    *redis*
    #+BEGIN_SRC redis
    > SADD foo 1 3 5
    (integer) 3
    > SMEMBERS foo
    "1"
    "3"
    "5"
    > SADD foo 1
    (integer) 0
    > SMEMBERS foo
    "1"
    "3"
    "5"
    #+END_SRC
    #+REVEAL_HTML: </div><div>
    *python*
    #+BEGIN_SRC python
    from redis import Redis

    redis = Redis()
    redis.sadd('foo', 1, 3, 5)
    print(redis.smembers('foo'))
    #=>{b'3', b'5', b'1'}
    redis.sadd('foo', 1)
    print(redis.smembers('foo'))
    #=>{b'3', b'5', b'1'}
    #+END_SRC
    #+REVEAL_HTML: </div>

#+BEGIN_NOTES
和集合・積集合・差集合演算もできる
#+END_NOTES


** Sorted Set (ZSet)
   file:img/zset.png

   - Stringの集合
     + 重複なし
   - 各メンバがScoreで順序付けされる
   - Scoreの取り出しは *$O(1)$*
   - 追加は $O(\log{N})$

#+BEGIN_NOTES
Redisの中でも特徴的な型
- 中間要素へのアクセスが高速
- サンプルは後で
#+END_NOTES

** Hash
   file:img/hash.png

   - StringからStringへのmap
     + Java: ~HashMap<String, String>~
   - 追加・削除・アクセスが *$O(1)$*
   - 最大2^{32}-1ペア

#+BEGIN_NOTES
少ないフィールドのHashはメモリ効率が良い
#+END_NOTES

*** Hash
    #+REVEAL_HTML: <div class="flex-container"><div>
    *redis*
    #+BEGIN_SRC redis
    > HSET bar 0:00 5
    (integer) 1
    > HGETALL bar
    1) "0:00"
    2) "5"
    > HMSET bar 1:00 5 2:00 6
    > HKEYS bar
    1) "0:00"
    2) "1:00"
    3) "2:00"
    > HGET bar 0:00
    "5"
    #+END_SRC
    #+REVEAL_HTML: </div><div>
    *python*
    #+BEGIN_SRC python
    from redis import Redis()

    redis = Redis()
    redis.hset('bar', '0:00', '5')
    print(redis.hgetall('bar'))
    #=>{b'0:00': b'5'}
    add_dict = {
        '1:00': '5',
        '2:00': '6'
    }
    redis.hmset('bar', add_dict)
    print(redis.hkeys('bar'))
    #=>[b'0:00', b'1:00', b'2:00]
    print(redis.hget('bar', '0:00'))
    #=>b'5'
    #+END_SRC
    #+REVEAL_HTML: </div></div>

* redisの使いどころ
** 有効期限のあるデータ
keyに対して有効期限を設定できる
#+BEGIN_SRC redis
EXPIRE key seconds
#+END_SRC
keyにseconds秒の期限を設定する

#+BEGIN_SRC redis
EXPIREAT key timestamp
#+END_SRC
keyの期限をtimestampにする

*** Sample Code
#+BEGIN_SRC python
from redis import Redis
from uuid import uuid4

class User:
    def generate_apikey(self):
        redis = Redis(host='localhost', port=6389)
        if redis.exists(self.token):
            return self.token
        new_apikey = 'hbt-' + str(uuid4())
        ttl = 10 * 60 * 60  # 10 minutes
        redis.setex(new_apikey, self.name, ttl)
        self.apikey = new_apikey
        return self.apikey
#+END_SRC

#+REVEAL_HTML: <div>
https://github.com/web-apps-tech/hubotmaker.git

https://hubot.web-apps.tech/
#+REVEAL_HTML: </div>

** リアルタイム・ランキング
*sorted set* が活躍


#+BEGIN_SRC redis
zadd key score member
#+END_SRC
keyにscore点を持ったmemberを追加する

#+BEGIN_SRC redis
zincrby key increment member
#+END_SRC
keyのmemberにincrement点加点する

#+BEGIN_SRC redis
zrange key start stop
#+END_SRC
keyのstart番目からstop番目を取得する


*** Sample Code
#+REVEAL_HTML: <div class="small">
#+BEGIN_SRC python
from redis import Redis

redis = Redis()

while True:
    print('input member:score> ', end='')
    ipt = input()
    if ipt == 'show':  # command 'show'
        ranking = redis.zrange('ranking', 0, 5, withscores=True)[::-1]
        for i, m in enumerate(ranking):
            values = {
                'rank': i+1,
                'member': m[0].decode(),
                'point': m[1]
            }
            print('{rank}: {member} ({point}pt)'.format(**values))
        continue
    member, score = args.split(':')
    redis.zadd('ranking', member, int(score))
print('good bye')
#+END_SRC
#+REVEAL_HTML:</div>

https://github.com/nasa9084/samples.git

* redisを使ってみる
** try redis
   file:img/try_redis.png
   http://try.redis.io/

#+BEGIN_NOTES
チュートリアルも搭載
#+END_NOTES

** official docker container
:PROPERTIES:
:reveal_background: img/docker.png
:END:

#+BEGIN_SRC shell
$ docker run redis
#+END_SRC

* Conclusion
