#+REVEAL_ROOT: ../../reveal.js
#+REVEAL_MATHJAX_URL: https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
#+OPTIONS: toc:0 reveal_mathjax:t num:nil LaTeX:t timestamp:nil
#+REVEAL_THEME: night
#+TITLE: Hubotをはじめる
#+AUTHOR: nasa9084
#+EMAIL:
#+REVEAL_EXTRA_CSS: ../reveal_extra_css.css
#+OPTIONS: ^:{}

* 自己紹介
#+REVEAL_HTML: <div style="float:left;">
[[../pika.jpg]]
#+REVEAL_HTML: </div>
- 名前
  + 北村壮大 : Masahiro Kitamura
  + HN : nasa9084
- 所属
  + 北海道大学
  + 工学部
  + 情報エレクトロニクス学科
  + コンピュータサイエンスコース
  + 情報認識学研究室

* botとは
- チャットに常駐してコマンドを待ち受けて実行したり
- 決められた条件に従ってチャットに発言したり
[[./bot_example.png]]

* Hubot
GitHub社謹製bot作成フレームワーク

[[./hellohubot.png]]

#+BEGIN_NOTES
Node.js + coffeescript
#+END_NOTES

*** 特徴
- 様々なチャットに対応
- 導入が簡単
- 簡単にスクリプトを書いて拡張できる

[[./slack.png]]
[[./hipchat.png]]
[[./skype.png]]

#+BEGIN_NOTES
- "Adapter"によって切り替え可能
- いろんなチャットの人がスクリプトを共有できる
#+END_NOTES

** Hubotの構造
[[./structure_of_hubot.png]]

** Robot
Hubotの本体

- Adapterから情報を受け取って
- scriptsに従って処理をして
- Adapterに返事を返す

** Adapter
- チャットの状況をRobotに入力する
- Robotの出力をチャットに伝える

#+BEGIN_NOTES
既にいろいろなAdapterが公開されている

なくても自分で作れる
#+END_NOTES

*** 公開されているAdapterの例
| Service | Adapter       |
|---------+---------------|
| IRC     | hubot-irc     |
| Twitter | hubot-twitter |
| HipChat | hubot-hipchat |
| Slack   | hubot-slack   |

** Scripts
CoffeeScriptかJavaScriptで記述された動作ファイル

- 400以上のScriptsが標準で付属
- GitHub等に多数公開
- 自分でも簡単に書ける

* Install
[[./nodejs.png]]

Node.jsが必要
#+ATTR_REVEAL: :frag (appear)
→anyenv/ndenv を使うのが簡単

#+BEGIN_NOTES
windowsならnodistとか？
#+END_NOTES

** **env
rbenv, pyenvなど、言語環境バージョン管理ツールの総称

- 簡単に導入できる
- 簡単に複数バージョンの言語環境を導入できる
- 簡単にバージョンを変更できる
#+ATTR_REVEAL: :frag (appear)
→ node.js用は *ndenv*

*** anyenv
**env管理ツール
#+ATTR_REVEAL: :frag (appear)
→導入しておくと、別の言語に挑戦するのが簡単

*** anyenv/ndenvを使ってnode.jsを導入する
#+BEGIN_SRC zsh
$ anyenv install ndenv
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC zsh
(略)
Install ndenv succeeded!
Please reload your profile (exec $SHELL -l) or open a new session.
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC zsh
$ exec $SHELL -l
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC zsh
$ ndenv install --list
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC zsh
Available versions:
  v0.1.14
  v0.1.15
(中略)
  v6.2.2
  v6.3.0
  v6.3.1
  iojs-v1.0.0
(以下略)
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC zsh
$ ndenv install v6.3.1
(略)
#+END_SRC
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC zsh
$ ndenv global v6.3.1
#+END_SRC

*** **envの例
|--------+----------|
| **env  | Language |
|--------+----------|
| goenv  | go       |
| hsenv  | Haskell  |
| jenv   | Java     |
| ndenv  | Node.js  |
| phpenv | PHP      |
| plenv  | Perl     |
| pyenv  | python   |
| rbenv  | Ruby     |

** hubotを動かす準備
#+BEGIN_SRC zsh
$ npm install -g hubot coffee-script yo generator-hubot
$ mkdir botdir
$ cd botdir
$ yo hubot
#+END_SRC

*** インストールしたもの
#+REVEAL_HTML: <div style="float:left;">
- hubot :: Hubot本体
- coffee-script :: CoffeeScriptの実行環境
- yo :: Yeoman(雛形作成ツール)
- generator-hubot :: Yeoman用Hubot雛形
#+REVEAL_HTML: </div>

[[./yeoman.png]]

** [[./yo_hubot_prompt.png]]

** hubotを動かしてみる
#+BEGIN_SRC zsh
$ bin/hubot
#+END_SRC


** [[./hubot_prompt.png]]

* Scripts
Hubotの動作を記述するCoffeeScript/JavaScriptファイル

[[./coffeescript.png]]

** hubot-scriptsを使う
hubotに同梱された、たくさんのScripts

~hubot-scripts.json~ に使いたい名前を書くと使える

[[http://hubot-script-catalog.herokuapp.com/][hubot-scripts-catalog]] に一覧がある

*** hubot-scriptsの例
| file name      | 内容                                       |
|----------------+--------------------------------------------|
| coin.coffee    | "heads"か"tails"のどちらかをランダムで返す |
| kittens.coffee | 猫の写真をランダムに返す                   |
| tasks.coffee   | タスク管理をしてくれる                     |
| weather.coffee | 天気を返す                                 |

** GitHub等で公開されたものを使う
#+BEGIN_SRC zsh
$ npm install --save nasa9084/scripts_for_hubot
#+END_SRC

→GitHubからインストールできる

~external-scripts.json~ に追記で動作

** 自分で作る
自分でCoffeeScript/JavaScriptで動作を書いて使うことができる

~scripts/~ ディレクトリに入れて使う

* Scriptの書き方
#+BEGIN_SRC coffee
module.exports = (robot) ->
    robot.hear /正規表現/, (res) ->
        #何らかの処理
        res.send 'hogehoge'
#+END_SRC

** 入力
- ~robot.hear /正規表現/~ :: 正規表現に合致する投稿に対して動作
- ~robot.respond /正規表現/~ :: 正規表現に合致する呼びかけに対して動作
- ~robot.enter~ :: ユーザが入室したら動作
- ~robot.leave~ :: ユーザが退室したら動作
- ~robot.topic~ :: チャットルームのトピックが変更されたら動作

#+BEGIN_NOTES
topicは対応時のみ
#+END_NOTES

*** robot.respond
ロボット名を使った呼びかけに対して動作
#+BEGIN_SRC coffee
robot.respond /hello/
#+END_SRC

#+ATTR_REVEAL: :frag (appear)
- ~hubot hello~
- ~hubot: hello~
- ~@hubot hello~

#+ATTR_REVEAL: :frag (appear)
に対して反応

#+BEGIN_NOTES
botの名前がhubotと仮定
#+END_NOTES

** 出力
- ~robot.send~ :: 単に反応
- ~robot.reply~ :: 返信の形で反応

** メッセージの取得
#+BEGIN_SRC coffee
module.exports = (robot) ->
    robot.hear /正規表現/, (res) ->
        #何らかの処理
        res.send 'hogehoge'
#+END_SRC

res.matchにメッセージの配列が入っている
- メッセージ本体
- 正規表現のグループに合致した部分

*** メッセージの処理
#+BEGIN_SRC coffee
res.random <LIST>
#+END_SRC

リストからランダムに一つ選ぶ


** 例
*あいさつ*
#+BEGIN_SRC coffee
module.exports = (robot) ->
    robot.hear /寝る/, (res) ->
        res.send res.random [
            "おやすみ",
            "オヤスミ_〆(・∇・*)",
            "おやすみ(。´-ω-｀。).zZ",
            "|･ω･｀)おやすみ。",
            "(つ∀-)ｵﾔｽﾐー",
            "(o･д･)尸~~おやすみ～♪"
        ]
#+END_SRC

** 面白いものが書けたら・・・
github: nasa9084/scripts_for_hubot にPRしてください！

* まとめ！
- Hubotは色々なところで使えるbotフレームワーク
  + slack, twitter, HipChat, and so on.
- 導入が簡単
  + ~yo hubot~ するだけ
- 簡単に動作を追加できる
  + 沢山付属Scriptsがある
  + いろんな人が公開しているので簡単に増やせる
  + 自分で書くのも簡単
    - CoffeeScript/JavaScriptで書ける

#+REVEAL_HTML: <span style="color: #ff8ec6;font-weight: bold;text-decoration:underline;">
#+ATTR_REVEAL: :frag (appear)
→ Hubot、楽しい！ ←
#+REVEAL_HTML: </span>
